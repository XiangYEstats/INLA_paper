knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(sp)
library(gstat)
library(sf)
library(plyr)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(tidyverse)
library(viridis)
library(INLA)
library(maptools)
library(automap)
library(MASS)
library(sp)
library(gstat)
library(sf)
library(plyr)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(tidyverse)
library(viridis)
library(INLA)
library(maptools)
library(automap)
load('aux/PollutantsMExicoCity2021.RData')
CDMX_border<-st_union(CDMX_sf)
ggplot() +
geom_sf(data = CDMX_sf, color = "white") +
geom_sf(data = CDMX_Nsf, color = "gray",bg="gray")+
geom_sf(data=CDMX_border,color='black',bg="transparent")+
coord_sf()+geom_point(data=Stations,aes(x=lon,y=lat),col='blue',size=2)
###Creating the mesh
coords.sp.aux<-SpatialPoints(Stations[,5:6],proj4string = CRS("+proj=longlat +datum=WGS84"))
bbox(coords.sp.aux)
##transformed to KM
coords.sp<-spTransform(coords.sp.aux,CRS("+proj=utm +units=km +datum=WGS84 +zone=14"))
bbox(coords.sp)
source('Functions.R')
source('Functions.R')
# Define Matern covariance function
matern.cov<-function(d, nu = 2, kappa = 1,sig=1){
if(nu == 0.5){
return(sig^2*exp( - d * alpha))
}
gamma.d<- ifelse(d>0,sig^2 * (2^(1-nu)/ gamma(nu)) * ((d*kappa)^nu) * besselK(d*kappa, nu),sig^2)
return(gamma.d)
}
# Function to simulate the data
GP.data <- function(coordinates,nu=1,kappa=1,sig=1,mu=50){
coordinates = as.data.frame(coordinates)
n <- nrow(coordinates)
D <- dist(coordinates)
## Simulation
sim_mat <- matern.cov(as.matrix(D),nu=nu,kappa=kappa,sig=sig)
data <- mvrnorm(mu=rep(mu,n), Sigma=sim_mat)
return(data)
}
set.seed(123)
Gaussian_dat = abs(GP.data(as.data.frame(coords.sp), nu=1, kappa=4, sig=5, mu=40))
Gaussian_dat
# Function include constructing a mesh, fit an SPDE, and do the INLA to find the posteriors of the parameters
mesh.test2 <- function(data, coordinates, boundary, max_edge_1,
max_edge_2, min_angle_1, min_angle_2,
cutoff, offset_1, offset_2){
## data: the data
## coordinates: the longitude and latitude of the data point (recommended in kilometers)
## boundary: boundary of the mesh
## max_edge_1: maximum edge length in direction 1
## max_edge_2: maximum edge length in direction 2
### min.angle argument: can be scalar or length two vector,  can be used to specify the
### minimum internal angles of the triangles in the inner domain and the outer extension.
## min_angle_1:
## min_angle_2:
## cutoff: to set the minimum allowed distance between points
## offset_1: set the automatic extension distance in direction 1
## offset_2: set the automatic extension distance in direction 2
df <- as.data.frame(coordinates)
df$dat = data
colnames(df) <- c('lon','lat','dat')
mesh0 <- inla.mesh.2d(loc = coordinates, boundary = boundary,
max.edge = c(max_edge_1,max_edge_2),
min.angle = c(min_angle_1,min_angle_2),
cutoff=cutoff,
offset=c(offset_1,offset_2))
## priors for SPDE
## sigma
sigma_0 <- sd(df$dat)+0.1
## range
vgm.emp <- variogram(dat~1, data = df,
locations = ~lon+lat)
fitvariogram<-fit.variogram(vgm.emp, vgm(c( "Mat")),
fit.kappa = TRUE)
range_0 <- fitvariogram$range[2]
spde0 <- inla.spde2.pcmatern(
mesh = mesh0, alpha = 2,
prior.range = c(range_0,0.85),
prior.sigma = c(sigma_0,0.01))
A <- inla.spde.make.A(mesh0, loc = coordinates)
dat.stk <- inla.stack(
data = list(resp = df$dat),
A = list(A, 1),
effects = list(i = 1:spde0$n.spde,
beta0 = rep(1, nrow(df))))
res <- inla(resp ~ 0 + beta0 + f(i, model = spde0),
data = inla.stack.data(dat.stk),
control.predictor = list(A = inla.stack.A(dat.stk)))
## expectation of the posterior standard error
post.se <- inla.tmarginal(function(x) sqrt(1 / exp(x)),
res$internal.marginals.hyperpar[[1]])
post.se.e <- inla.emarginal(function(x) x, post.se)
precision = inla.emarginal(function(x) x, res$marginals.hyperpar[[1]])
range.hat = inla.emarginal(function(x) x, res$marginals.hyperpar[[2]])
sigma.hat = inla.emarginal(function(x) x, res$marginals.hyperpar[[3]])
hyperparameters = list(range0 = range_0, sigma0 = sigma_0, range_hat = range.hat, sigma_hat = sigma.hat, post_expect_se = post.se.e, precision = precision)
return(hyperparameters)
}
# The border information
border.aux<- unionSpatialPolygons(CDMXpol,IDs = rep(1,16))
bbox(border.aux)
border<-spTransform(border.aux,CRS("+proj=utm +units=km +datum=WGS84 +zone=14"))
bbox(border)
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(sp)
library(gstat)
library(sf)
library(plyr)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(tidyverse)
library(viridis)
library(INLA)
library(maptools)
library(automap)
load('aux/PollutantsMExicoCity2021.RData')
CDMX_border<-st_union(CDMX_sf)
ggplot() +
geom_sf(data = CDMX_sf, color = "white") +
geom_sf(data = CDMX_Nsf, color = "gray",bg="gray")+
geom_sf(data=CDMX_border,color='black',bg="transparent")+
coord_sf()+geom_point(data=Stations,aes(x=lon,y=lat),col='blue',size=2)
###Creating the mesh
coords.sp.aux<-SpatialPoints(Stations[,5:6],proj4string = CRS("+proj=longlat +datum=WGS84"))
bbox(coords.sp.aux)
##transformed to KM
coords.sp<-spTransform(coords.sp.aux,CRS("+proj=utm +units=km +datum=WGS84 +zone=14"))
bbox(coords.sp)
source('Functions.R')
# Define Matern covariance function
matern.cov<-function(d, nu = 2, kappa = 1,sig=1){
if(nu == 0.5){
return(sig^2*exp( - d * alpha))
}
gamma.d<- ifelse(d>0,sig^2 * (2^(1-nu)/ gamma(nu)) * ((d*kappa)^nu) * besselK(d*kappa, nu),sig^2)
return(gamma.d)
}
# Function to simulate the data
GP.data <- function(coordinates,nu=1,kappa=1,sig=1,mu=50){
coordinates = as.data.frame(coordinates)
n <- nrow(coordinates)
D <- dist(coordinates)
## Simulation
sim_mat <- matern.cov(as.matrix(D),nu=nu,kappa=kappa,sig=sig)
data <- mvrnorm(mu=rep(mu,n), Sigma=sim_mat)
return(data)
}
set.seed(123)
Gaussian_dat = abs(GP.data(as.data.frame(coords.sp), nu=1, kappa=4, sig=5, mu=40))
Gaussian_dat
# The border information
border.aux<- unionSpatialPolygons(CDMXpol,IDs = rep(1,16))
bbox(border.aux)
border<-spTransform(border.aux,CRS("+proj=utm +units=km +datum=WGS84 +zone=14"))
bbox(border)
# Run the INLA process to find the posteriors
mesh.test2(data = Gaussian_dat, coordinates=coords.sp,
boundary=border, max_edge_1=10, max_edge_2=12,
min_angle_1=20, min_angle_2=20, cutoff=5,
offset_1=5, offset_2=7)
# Run the INLA process to find the posteriors
mesh.test2(data = Gaussian_dat, coordinates=coords.sp,
boundary=border, max_edge_1=10, max_edge_2=12,
min_angle_1=20, min_angle_2=20, cutoff=5,
offset_1=5, offset_2=7)
# Run the INLA process to find the posteriors
mesh.test2(data = Gaussian_dat, coordinates=coords.sp,
boundary=border, max_edge_1=10, max_edge_2=12,
min_angle_1=20, min_angle_2=20, cutoff=5,
offset_1=5, offset_2=7)
# Run the INLA process to find the posteriors
set.seed(3874)
mesh.test2(data = Gaussian_dat, coordinates=coords.sp,
boundary=border, max_edge_1=10, max_edge_2=12,
min_angle_1=20, min_angle_2=20, cutoff=5,
offset_1=5, offset_2=7)
# All parameters try all number in one decimal places.
# If possible, 2 decimal places would be better (but perhaps too intensive)
## max_edge_1: 5~20
## max_edge_2: 5~20
## min_angle_1: 10~30
## min_angle_2: 10~30
## cutoff: 1~20
## offset_1: 1~20
## offset_2: 1~20
me1<-seq(5,20,by=1)
me2<-seq(5,20,by=1)
ma1<-seq(10,30,by=1)
ma2<-seq(10,30,by=1)
co<-seq(1,20,by=1)
os1<-seq(1,20,by=1)
os2<-seq(1,20,by=1)
par.combined<-matrix(NA,nrow=length(me1)*length(me2)*length(ma1)*length(ma2)*length(co)*length(os1)*length(os2)
,ncol = 7)
length(me1)*length(me2)*length(ma1)*length(ma2)*length(co)*length(os1)*length(os2)
me1<-seq(5,20,by=5)
me2<-seq(5,20,by=5)
ma1<-seq(10,30,by=5)
ma2<-seq(10,30,by=5)
co<-seq(1,20,by=5)
os1<-seq(1,20,by=5)
os2<-seq(1,20,by=5)
length(me1)*length(me2)*length(ma1)*length(ma2)*length(co)*length(os1)*length(os2)
# All parameters try all number in one decimal places.
# If possible, 2 decimal places would be better (but perhaps too intensive)
## max_edge_1: 5~20
## max_edge_2: 5~20
## min_angle_1: 10~30
## min_angle_2: 10~30
## cutoff: 1~20
## offset_1: 1~20
## offset_2: 1~20
me1<-seq(5,20,by=5)
me2<-seq(5,20,by=5)
ma1<-seq(10,30,by=5)
ma2<-seq(10,30,by=5)
co<-seq(1,20,by=5)
os1<-seq(1,20,by=5)
os2<-seq(1,20,by=5)
par.combined<-matrix(NA,nrow=length(me1)*length(me2)*length(ma1)*length(ma2)*length(co)*length(os1)*length(os2)
,ncol = 7)
aux.i<-1
for(i.me1 in 1:length(me1)){
for(i.me2 in 1:length(me2)){
for(i.ma1 in 1:length(ma1)){
for(i.ma2 in 1:length(ma2)){
for(i.co in 1:length(co)){
for(i.os1 in 1:length(os1)){
for(i.os2 in 1:length(os2)){
par.combined[aux.i,]<-c(me1[i.me1],me2[i.me2],ma1[i.ma1],ma2[i.ma2],co[i.co],os1[i.os1],os2[i.os2])
aux.i<-aux.i+1
}}}}}}}
colnames(par.combined)<-c('edge1','edge2','angle1','angle2','cutoff','offset1','offset2')
