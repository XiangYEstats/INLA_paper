if(nu == 0.5){
return(sig^2*exp( - d * alpha))
}
gamma.d<- ifelse(d>0,sig^2 * (2^(1-nu)/ gamma(nu)) * ((d*kappa)^nu) * besselK(d*kappa, nu),sig^2)
return(gamma.d)
}
# Function to simulate the data
GP.data <- function(coordinates,nu=1,kappa=1,sig=1,mu=50){
coordinates = as.data.frame(coordinates)
n <- nrow(coordinates)
D <- dist(coordinates)
## Simulation
sim_mat <- matern.cov(as.matrix(D),nu=nu,kappa=kappa,sig=sig)
data <- mvrnorm(mu=rep(mu,n), Sigma=sim_mat)
return(data)
}
set.seed(123)
Gaussian_dat = abs(GP.data(as.data.frame(coords.sp), nu=1, kappa=4, sig=5, mu=40))
Gaussian_dat
# The border information
border.aux<- unionSpatialPolygons(CDMXpol,IDs = rep(1,16))
bbox(border.aux)
border<-spTransform(border.aux,CRS("+proj=utm +units=km +datum=WGS84 +zone=14"))
bbox(border)
# Run the INLA process to find the posteriors
mesh.test2(data = Gaussian_dat, coordinates=coords.sp,
boundary=border, max_edge_1=10, max_edge_2=12,
min_angle_1=20, min_angle_2=20, cutoff=5,
offset_1=5, offset_2=7)
# Run the INLA process to find the posteriors
mesh.test2(data = Gaussian_dat, coordinates=coords.sp,
boundary=border, max_edge_1=10, max_edge_2=12,
min_angle_1=20, min_angle_2=20, cutoff=5,
offset_1=5, offset_2=7)
# Run the INLA process to find the posteriors
mesh.test2(data = Gaussian_dat, coordinates=coords.sp,
boundary=border, max_edge_1=10, max_edge_2=12,
min_angle_1=20, min_angle_2=20, cutoff=5,
offset_1=5, offset_2=7)
# Run the INLA process to find the posteriors
set.seed(3874)
mesh.test2(data = Gaussian_dat, coordinates=coords.sp,
boundary=border, max_edge_1=10, max_edge_2=12,
min_angle_1=20, min_angle_2=20, cutoff=5,
offset_1=5, offset_2=7)
# All parameters try all number in one decimal places.
# If possible, 2 decimal places would be better (but perhaps too intensive)
## max_edge_1: 5~20
## max_edge_2: 5~20
## min_angle_1: 10~30
## min_angle_2: 10~30
## cutoff: 1~20
## offset_1: 1~20
## offset_2: 1~20
me1<-seq(5,20,by=1)
me2<-seq(5,20,by=1)
ma1<-seq(10,30,by=1)
ma2<-seq(10,30,by=1)
co<-seq(1,20,by=1)
os1<-seq(1,20,by=1)
os2<-seq(1,20,by=1)
par.combined<-matrix(NA,nrow=length(me1)*length(me2)*length(ma1)*length(ma2)*length(co)*length(os1)*length(os2)
,ncol = 7)
length(me1)*length(me2)*length(ma1)*length(ma2)*length(co)*length(os1)*length(os2)
me1<-seq(5,20,by=5)
me2<-seq(5,20,by=5)
ma1<-seq(10,30,by=5)
ma2<-seq(10,30,by=5)
co<-seq(1,20,by=5)
os1<-seq(1,20,by=5)
os2<-seq(1,20,by=5)
length(me1)*length(me2)*length(ma1)*length(ma2)*length(co)*length(os1)*length(os2)
# All parameters try all number in one decimal places.
# If possible, 2 decimal places would be better (but perhaps too intensive)
## max_edge_1: 5~20
## max_edge_2: 5~20
## min_angle_1: 10~30
## min_angle_2: 10~30
## cutoff: 1~20
## offset_1: 1~20
## offset_2: 1~20
me1<-seq(5,20,by=5)
me2<-seq(5,20,by=5)
ma1<-seq(10,30,by=5)
ma2<-seq(10,30,by=5)
co<-seq(1,20,by=5)
os1<-seq(1,20,by=5)
os2<-seq(1,20,by=5)
par.combined<-matrix(NA,nrow=length(me1)*length(me2)*length(ma1)*length(ma2)*length(co)*length(os1)*length(os2)
,ncol = 7)
aux.i<-1
for(i.me1 in 1:length(me1)){
for(i.me2 in 1:length(me2)){
for(i.ma1 in 1:length(ma1)){
for(i.ma2 in 1:length(ma2)){
for(i.co in 1:length(co)){
for(i.os1 in 1:length(os1)){
for(i.os2 in 1:length(os2)){
par.combined[aux.i,]<-c(me1[i.me1],me2[i.me2],ma1[i.ma1],ma2[i.ma2],co[i.co],os1[i.os1],os2[i.os2])
aux.i<-aux.i+1
}}}}}}}
colnames(par.combined)<-c('edge1','edge2','angle1','angle2','cutoff','offset1','offset2')
library(MASS)
library(sp)
library(gstat)
library(sf)
library(plyr)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(tidyverse)
library(viridis)
library(INLA)
library(maptools)
library(automap)
# Data and source functions
load('aux/PollutantsMExicoCity2021.RData')
source('Functions.R')
# Mesh prep
CDMX_border<-st_union(CDMX_sf)
coords.sp.aux<-SpatialPoints(Stations[,5:6],proj4string = CRS("+proj=longlat +datum=WGS84"))
##transformed to KM
coords.sp<-spTransform(coords.sp.aux,CRS("+proj=utm +units=km +datum=WGS84 +zone=14"))
##Border
border.aux<- unionSpatialPolygons(CDMXpol,IDs = rep(1,16))
border<-spTransform(border.aux,CRS("+proj=utm +units=km +datum=WGS84 +zone=14"))
knitr::opts_chunk$set(echo = TRUE)
# Run the INLA process to find the posteriors
mesh.test2(data = Gaussian_dat, coordinates=coords.sp,
boundary=border, max_edge_1=10, max_edge_2=12,
min_angle_1=20, min_angle_2=20, cutoff=5,
offset_1=5, offset_2=7)
source('Functions.R')
source('Functions.R')
# Run the INLA process to find the posteriors
mesh.test2(data = Gaussian_dat, coordinates=coords.sp,
boundary=border, max_edge_1=10, max_edge_2=12,
min_angle_1=20, min_angle_2=20, cutoff=5,
offset_1=5, offset_2=7)
set.seed(123)
Gaussian_dat = abs(GP.data(as.data.frame(coords.sp), nu=1, kappa=4, sig=15, mu=45))
Gaussian_dat
# Run the INLA process to find the posteriors
mesh.test2(data = Gaussian_dat, coordinates=coords.sp,
boundary=border, max_edge_1=10, max_edge_2=12,
min_angle_1=20, min_angle_2=20, cutoff=5,
offset_1=5, offset_2=7)
# All parameters try all number in one decimal places.
# If possible, 2 decimal places would be better (but perhaps too intensive)
## max_edge_1: 5~20
## max_edge_2: 5~20
## min_angle_1: 10~30
## min_angle_2: 10~30
## cutoff: 1~20
## offset_1: 1~20
## offset_2: 1~20
## We start with three for now
me1<-seq(5,20,by=5)
me2<-seq(5,20,by=5)
co<-seq(1,20,by=5)
par.combined<-matrix(NA,nrow=length(me1)*length(me2)*length(co),ncol = 3)
aux.i<-1
for(i.me1 in 1:length(me1)){
for(i.me2 in 1:length(me2)){
for(i.co in 1:length(co)){
par.combined[aux.i,]<-c(me1[i.me1],me2[i.me2],co[i.co])
aux.i<-aux.i+1
}}}
colnames(par.combined)<-c('edge1','edge2','cutoff')
par.combined
me1<-seq(5,20,by=1)
me2<-seq(5,20,by=1)
co<-seq(1,20,by=1)
par.combined<-matrix(NA,nrow=length(me1)*length(me2)*length(co),ncol = 3)
aux.i<-1
for(i.me1 in 1:length(me1)){
for(i.me2 in 1:length(me2)){
for(i.co in 1:length(co)){
par.combined[aux.i,]<-c(me1[i.me1],me2[i.me2],co[i.co])
aux.i<-aux.i+1
}}}
colnames(par.combined)<-c('edge1','edge2','cutoff')
me1<-seq(5,20,by=2)
me2<-seq(5,20,by=2)
co<-seq(1,20,by=2)
par.combined<-matrix(NA,nrow=length(me1)*length(me2)*length(co),ncol = 3)
aux.i<-1
for(i.me1 in 1:length(me1)){
for(i.me2 in 1:length(me2)){
for(i.co in 1:length(co)){
par.combined[aux.i,]<-c(me1[i.me1],me2[i.me2],co[i.co])
aux.i<-aux.i+1
}}}
colnames(par.combined)<-c('edge1','edge2','cutoff')
par.combined
# All parameters try all number in one decimal places.
# If possible, 2 decimal places would be better (but perhaps too intensive)
## max_edge_1: 5~20
## max_edge_2: 5~20
## min_angle_1: 10~30
## min_angle_2: 10~30
## cutoff: 1~10
## offset_1: 1~20
## offset_2: 1~20
## We start with three for now
me1<-seq(5,20,by=5)
me2<-seq(5,20,by=5)
co<-seq(1,10,by=1)
par.combined<-matrix(NA,nrow=length(me1)*length(me2)*length(co),ncol = 3)
aux.i<-1
for(i.me1 in 1:length(me1)){
for(i.me2 in 1:length(me2)){
for(i.co in 1:length(co)){
par.combined[aux.i,]<-c(me1[i.me1],me2[i.me2],co[i.co])
aux.i<-aux.i+1
}}}
me1
# All parameters try all number in one decimal places.
# If possible, 2 decimal places would be better (but perhaps too intensive)
## max_edge_1: 5~20
## max_edge_2: 5~20
## min_angle_1: 10~30
## min_angle_2: 10~30
## cutoff: 1~10
## offset_1: 1~20
## offset_2: 1~20
## We start with three for now
me1<-seq(5,20,by=3)
me2<-seq(5,20,by=3)
me1
par.combined<-matrix(NA,nrow=length(me1)*length(me2)*length(co),ncol = 3)
aux.i<-1
for(i.me1 in 1:length(me1)){
for(i.me2 in 1:length(me2)){
for(i.co in 1:length(co)){
par.combined[aux.i,]<-c(me1[i.me1],me2[i.me2],co[i.co])
aux.i<-aux.i+1
}}}
colnames(par.combined)<-c('edge1','edge2','cutoff')
GP.data(coords.sp,nu=1,kappa=4,sig=15,mu=45)
length(coord.sp)
length(coords.sp)
##Testing data set
set.seed(89275)
M<-50
data.sim<-matrix(NA,nrom=M,ncol = length(coords.sp))
for(j in 1:M)data.sim[j,]<-GP.data(coords.sp,nu=1,kappa=4,sig=15,mu=45)
data.sim<-matrix(NA,nrow=M,ncol = length(coords.sp))
for(j in 1:M)data.sim[j,]<-GP.data(coords.sp,nu=1,kappa=4,sig=15,mu=45)
n.pars<-nrow(par.combined)
colnames(par.combined)<-c('edge1','edge2','cutoff')
n.pars<-nrow(par.combined)
View(par.combined)
par.combined$edge1
# All parameters try all number in one decimal places.
# If possible, 2 decimal places would be better (but perhaps too intensive)
## max_edge_1: 5~20
## max_edge_2: 5~20
## min_angle_1: 10~30
## min_angle_2: 10~30
## cutoff: 1~10
## offset_1: 1~20
## offset_2: 1~20
## We start with three for now
me1<-seq(5,20,by=3)
me2<-seq(5,20,by=3)
co<-seq(1,10,by=1)
par.combined<-matrix(NA,nrow=length(me1)*length(me2)*length(co),ncol = 3)
aux.i<-1
for(i.me1 in 1:length(me1)){
for(i.me2 in 1:length(me2)){
for(i.co in 1:length(co)){
par.combined[aux.i,]<-c(me1[i.me1],me2[i.me2],co[i.co])
aux.i<-aux.i+1
}}}
colnames(par.combined)<-c('edge1','edge2','cutoff')
n.pars<-nrow(par.combined)
##Testing data set
set.seed(89275)
M<-50
data.sim<-matrix(NA,nrow=M,ncol = length(coords.sp))
for(j in 1:M)data.sim[j,]<-GP.data(coords.sp,nu=1,kappa=4,sig=15,mu=45)
par.combined$edge1
par.combined
## now we run the Sim study
OUT.Sim<-vector('list',n.pars)
for( i.par in 1:2){
posteriors = as.data.frame(matrix(0,M,7))
colnames(posteriors)=c("prior range", "prior sigma", "posterior range", "posterior sigma", "dic", "post_expect_se", "precision")
for(j in 1:M){
post = mesh.test2(data = data.sim[j,], coordinates=coords.sp,
boundary=border, max_edge_1= par.combined[1,i.par] , max_edge_2=par.combined[2,i.par],
min_angle_1=20, min_angle_2=20, cutoff=par.combined[3,i.par],
offset_1=5, offset_2=7)
posteriors[j,1]=post$range0
posteriors[j,2]=post$sigma0
posteriors[j,3]=post$range_hat
posteriors[j,4]=post$sigma_hat
posteriors[j,5]=post$dic
posteriors[j,6]=post$post_expect_se
posteriors[j,7]=post$precision
}
OUT.Sim[[i.par]]<-posteriors
print(i.par)
}
OUT.Sim
OUT.Sim[[1]]
min(data.sim)
summary(data.sim)
hist(data.sim)
library(MASS)
library(sp)
library(gstat)
library(sf)
library(plyr)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(tidyverse)
library(viridis)
library(INLA)
library(maptools)
library(automap)
# Data and source functions
load('aux/PollutantsMExicoCity2021.RData')
source('Functions.R')
# Mesh prep
CDMX_border<-st_union(CDMX_sf)
coords.sp.aux<-SpatialPoints(Stations[,5:6],proj4string = CRS("+proj=longlat +datum=WGS84"))
##transformed to KM
coords.sp<-spTransform(coords.sp.aux,CRS("+proj=utm +units=km +datum=WGS84 +zone=14"))
##Border
border.aux<- unionSpatialPolygons(CDMXpol,IDs = rep(1,16))
border<-spTransform(border.aux,CRS("+proj=utm +units=km +datum=WGS84 +zone=14"))
# All parameters try all number in one decimal places.
# If possible, 2 decimal places would be better (but perhaps too intensive)
## max_edge_1: 5~20
## max_edge_2: 5~20
## min_angle_1: 10~30
## min_angle_2: 10~30
## cutoff: 1~10
## offset_1: 1~20
## offset_2: 1~20
## We start with three for now
me1<-seq(5,20,by=3)
me2<-seq(5,20,by=3)
co<-seq(1,10,by=1)
par.combined<-matrix(NA,nrow=length(me1)*length(me2)*length(co),ncol = 3)
aux.i<-1
for(i.me1 in 1:length(me1)){
for(i.me2 in 1:length(me2)){
for(i.co in 1:length(co)){
par.combined[aux.i,]<-c(me1[i.me1],me2[i.me2],co[i.co])
aux.i<-aux.i+1
}}}
colnames(par.combined)<-c('edge1','edge2','cutoff')
n.pars<-nrow(par.combined)
##Testing data set
set.seed(89275)
M<-50
data.sim<-matrix(NA,nrow=M,ncol = length(coords.sp))
for(j in 1:M)data.sim[j,]<-GP.data(coords.sp,nu=1,kappa=4,sig=15,mu=45)
# All parameters try all number in one decimal places.
# If possible, 2 decimal places would be better (but perhaps too intensive)
## max_edge_1: 5~20
## max_edge_2: 5~20
## min_angle_1: 10~30
## min_angle_2: 10~30
## cutoff: 1~10
## offset_1: 1~20
## offset_2: 1~20
## We start with three for now
me1<-seq(5,20,by=3)
me2<-seq(5,20,by=3)
co<-seq(1,10,by=1)
par.combined<-matrix(NA,nrow=length(me1)*length(me2)*length(co),ncol = 3)
aux.i<-1
for(i.me1 in 1:length(me1)){
for(i.me2 in 1:length(me2)){
for(i.co in 1:length(co)){
par.combined[aux.i,]<-c(me1[i.me1],me2[i.me2],co[i.co])
aux.i<-aux.i+1
}}}
colnames(par.combined)<-c('edge1','edge2','cutoff')
n.pars<-nrow(par.combined)
##Testing data set
set.seed(89275)
M<-5
data.sim<-matrix(NA,nrow=M,ncol = length(coords.sp))
for(j in 1:M)data.sim[j,]<-GP.data(coords.sp,nu=1,kappa=4,sig=15,mu=45)
## now we run the Sim study
OUT.Sim<-vector('list',n.pars)
i.par <-1
posteriors = as.data.frame(matrix(0,M,7))
colnames(posteriors)=c("prior range", "prior sigma", "posterior range", "posterior sigma", "dic", "post_expect_se", "precision")
for(j in 1:M){
post = mesh.test2(data = data.sim[j,], coordinates=coords.sp,
boundary=border, max_edge_1= par.combined[1,i.par] , max_edge_2=par.combined[2,i.par],
min_angle_1=20, min_angle_2=20, cutoff=par.combined[3,i.par],
offset_1=5, offset_2=7)
posteriors[j,1]=post$range0
posteriors[j,2]=post$sigma0
posteriors[j,3]=post$range_hat
posteriors[j,4]=post$sigma_hat
posteriors[j,5]=post$dic
posteriors[j,6]=post$post_expect_se
posteriors[j,7]=post$precision
}
posteriors
bbox(coords.sp)
##Testing data set
set.seed(89275)
M<-10
data.sim<-matrix(NA,nrow=M,ncol = length(coords.sp))
for(j in 1:M)data.sim[j,]<-GP.data(coords.sp,nu=1,kappa=4,sig=15,mu=45)
##Testing data set
set.seed(89275)
M<-10
data.sim<-matrix(NA,nrow=M,ncol = length(coords.sp))
for(j in 1:M)data.sim[j,]<-GP.data(coords.sp,nu=1,kappa=4,sig=15,mu=45)
## now we run the Sim study
OUT.Sim<-vector('list',n.pars)
for( i.par in 1:3){
posteriors = as.data.frame(matrix(0,M,7))
colnames(posteriors)=c("prior range", "prior sigma", "posterior range", "posterior sigma", "dic", "post_expect_se", "precision")
for(j in 1:M){
post = mesh.test2(data = data.sim[j,], coordinates=coords.sp,
boundary=border, max_edge_1= par.combined[1,i.par] , max_edge_2=par.combined[2,i.par],
min_angle_1=20, min_angle_2=20, cutoff=par.combined[3,i.par],
offset_1=5, offset_2=7)
posteriors[j,1]=post$range0
posteriors[j,2]=post$sigma0
posteriors[j,3]=post$range_hat
posteriors[j,4]=post$sigma_hat
posteriors[j,5]=post$dic
posteriors[j,6]=post$post_expect_se
posteriors[j,7]=post$precision
}
OUT.Sim[[i.par]]<-posteriors
print(i.par)
}
# All parameters try all number in one decimal places.
# If possible, 2 decimal places would be better (but perhaps too intensive)
## max_edge_1: 5~20
## max_edge_2: 5~20
## min_angle_1: 10~30
## min_angle_2: 10~30
## cutoff: 1~10
## offset_1: 1~20
## offset_2: 1~20
## We start with three for now
me1<-seq(5,20,by=5)
me2<-seq(5,20,by=5)
co<-seq(1,10,by=2)
par.combined<-matrix(NA,nrow=length(me1)*length(me2)*length(co),ncol = 3)
aux.i<-1
for(i.me1 in 1:length(me1)){
for(i.me2 in 1:length(me2)){
for(i.co in 1:length(co)){
par.combined[aux.i,]<-c(me1[i.me1],me2[i.me2],co[i.co])
aux.i<-aux.i+1
}}}
colnames(par.combined)<-c('edge1','edge2','cutoff')
n.pars<-nrow(par.combined)
##Testing data set
set.seed(89275)
M<-10
data.sim<-matrix(NA,nrow=M,ncol = length(coords.sp))
for(j in 1:M)data.sim[j,]<-GP.data(coords.sp,nu=1,kappa=4,sig=15,mu=45)
## now we run the Sim study
OUT.Sim<-vector('list',n.pars)
for( i.par in 1:n.pars){
posteriors = as.data.frame(matrix(0,M,7))
colnames(posteriors)=c("prior range", "prior sigma", "posterior range", "posterior sigma", "dic", "post_expect_se", "precision")
for(j in 1:M){
post = mesh.test2(data = data.sim[j,], coordinates=coords.sp,
boundary=border, max_edge_1= par.combined[1,i.par] , max_edge_2=par.combined[2,i.par],
min_angle_1=20, min_angle_2=20, cutoff=par.combined[3,i.par],
offset_1=5, offset_2=7)
posteriors[j,1]=post$range0
posteriors[j,2]=post$sigma0
posteriors[j,3]=post$range_hat
posteriors[j,4]=post$sigma_hat
posteriors[j,5]=post$dic
posteriors[j,6]=post$post_expect_se
posteriors[j,7]=post$precision
}
OUT.Sim[[i.par]]<-posteriors
print(i.par)
}
## now we run the Sim study
OUT.Sim<-vector('list',n.pars)
for( i.par in 1:n.pars){
posteriors = as.data.frame(matrix(0,M,7))
colnames(posteriors)=c("prior range", "prior sigma", "posterior range", "posterior sigma", "dic", "post_expect_se", "precision")
for(j in 1:M){
post = mesh.test2(data = data.sim[j,], coordinates=coords.sp,
boundary=border, max_edge_1= par.combined[i.par,1] , max_edge_2=par.combined[i.par,2],
min_angle_1=20, min_angle_2=20, cutoff=par.combined[i.par,3],
offset_1=5, offset_2=7)
posteriors[j,1]=post$range0
posteriors[j,2]=post$sigma0
posteriors[j,3]=post$range_hat
posteriors[j,4]=post$sigma_hat
posteriors[j,5]=post$dic
posteriors[j,6]=post$post_expect_se
posteriors[j,7]=post$precision
}
OUT.Sim[[i.par]]<-posteriors
print(i.par)
}
save(file = 'aux/Output.RData',OUT.Sim,par.combined)
